---
layout: post
title:  "고루틴 톺아보기 (2)"
date:   2025-04-30 18:00:00 +0900
categories: tech 
---
## GMP 모델 살펴보기
GMP 모델은 고루틴 스케줄링을 위해 사용됩니다.
<img width="320" alt="img" src="https://github.com/user-attachments/assets/06e38116-9001-45e5-bf94-f164a5fb0fff" />
## Goroutine : 실제 실행 작업 단위
Go에서 만든 경량 스레드로 함수 단위의 실행 흐름입니다. 수천 개 생성 가능하며 `go someFunc()` 하면 하나 생성됩니다.
## Machine : 운영체제의 실제 스레드
OS 레벨 스레드로 실제로 CPU에서 코드를 실행합니다. G는 M 위에서 실행됩니다.
## Processor : G를 보관하고 스케줄링
G를 관리하는 큐를 가집니다. G를 어떤 순서로 실행할지 결정합니다. 기본적으로 CPU 코어 수만큼 P가 생성됩니다. 각 P는 최대 256개의 고루틴을 담을 수 있습니다.
만약 P의 큐가 다 차면 Global Run Queue에 G가 등록됩니다. P는 Queue의 모든 G를 처리하면 Global Queue에서 G를 가져와 실행합니다.
## 특징 (vs Coroutine)
스케줄링은 Go가 알아서 처리합니다. 코드에서 `await` 등을 통해 개발자가 비동기 흐름을 제어해야 하는 코루틴과는 다릅니다. Go 런타임은 G들을 P 큐에 넣고 M이 P를 통해 G를 가져와 실행합니다.
## 고루틴이 블로킹 되면 어떻게 될까?
G가 블로킹되는 순간 M은 해당 G를 실행할 수 없게 됩니다. Go 런타임은 새로운 M을 만들어서 같은 P에 묶인 다른 G들을 계속 실행합니다. 블로킹 된 G가 다시 실행가능해지면 다시 P의 큐에 등록됩니다.
